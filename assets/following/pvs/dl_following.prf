(dl_following
 (following_prop 0
  (following_prop-1 nil 3898081064
   ("" (dl-flatten)
    ((""
      (dl-diffghost "cnst(1/4)" "cnst(0)" "G"
       "val(G)^2*(val(xa)-val(xb))>=cnst(1)")
      (("1" (dl-inst "div_safe_re(cnst(1), (val(xa)-val(xb))^^(1/2))")
        (("1" (dl-diffinv)
          (("1" (grind :exclude "^^")
            (("1" (grind) nil nil)
             ("2" (lemma "sqrt_hathat") (("2" (grind) nil nil)) nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil)
       ("2" (dl-assert) nil nil) ("3" (dl-assert) nil nil)
       ("4" (grind) nil nil))
      nil))
    nil)
   ((nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (even? const-decl "bool" integers nil)
    (even_posnat nonempty-type-eq-decl nil naturalnumbers nil)
    (dl_differential_ghost formula-decl nil dynamic_logic dL)
    (ddl_dom? const-decl "bool" differentiation dL)
    (dl_true_DDL formula-decl nil differentiation dL)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (>= const-decl "BoolExpr" bool_expr dL)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (delta__22 skolem-const-decl "(null?[BoolExpr])" dl_following nil)
    (gamma__21 skolem-const-decl "(cons?[BoolExpr])" dl_following nil)
    (fresh? def-decl "bool" bool_expr dL)
    (fresh? const-decl "bool" hp_expr dL)
    (fresh? const-decl "bool" hp_expr dL)
    (G skolem-const-decl "even_posnat" dl_following nil)
    (fresh_li? inductive-decl "bool" hp_expr dL)
    (Assigns type-eq-decl nil hp_def dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cont_re? const-decl "bool" continuity_re_def dL)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (cont_re_cnst formula-decl nil continuity_re_props dL)
    (fresh_be_gt formula-decl nil fresh_props dL)
    (fresh_be_DLTRUE formula-decl nil fresh_props dL)
    (fresh_re_val formula-decl nil fresh_props dL)
    (fresh_re_div formula-decl nil fresh_props dL)
    (fresh_re_cnst formula-decl nil fresh_props dL)
    (fresh_re_minus formula-decl nil fresh_props dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (DLEXISTSRf const-decl "bool" bool_expr dL)
    (NQBool type-decl nil NQBool_adt dL)
    (nqb_normal? inductive-decl "bool" bool_expr dL)
    (NormNQBool type-eq-decl nil bool_expr dL)
    (nqb_to_be def-decl "BoolExpr" bool_expr dL)
    (normalize const-decl
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}"
     bool_expr dL)
    (NQB_REL type-decl nil hp_def dL)
    (nqb_rel? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt dL)
    (NQB_rel adt-constructor-decl
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" NQBool_adt dL)
    (nqb_ge? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def dL)
    (nqb_ge adt-constructor-decl "(nqb_ge?)" hp_def dL)
    (nqb_rel const-decl "BoolExpr" bool_expr dL)
    (dl_dI_dlTRUE formula-decl nil dynamic_logic dL)
    (gamma__30 skolem-const-decl "(cons?[BoolExpr])" dl_following nil)
    (delta__31 skolem-const-decl "(null?[BoolExpr])" dl_following nil)
    (nnqb__29 skolem-const-decl "{nnqbe: NormNQBool |
   nqb_to_be(nnqbe) =
    nqb_to_be(NQB_rel(nqb_ge, val(G) ^ 2 * (val(xa) - val(xb)), cnst(1)))}"
     dl_following nil)
    (normalize_rec def-decl "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}" bool_expr
     dL)
    (SUB_DIFT const-decl "BoolExpr" differentiation dL)
    (DIFT def-decl "BoolExpr" differentiation dL)
    (max_var const-decl "nat" hp_def dL)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (scal_function formula-decl nil real_fun_ops reals)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (dl_dift_mult formula-decl nil differentiation dL)
    (ddt def-decl "RealExpr" differentiation dL)
    (dl_derivable_up_minus formula-decl nil differentiation dL)
    (dl_derivable_up_val formula-decl nil differentiation dL)
    (ddl_dom_upto? const-decl "bool" differentiation dL)
    (derivable_up? const-decl "bool" differentiation dL)
    (dl_derivable_up_pow formula-decl nil differentiation dL)
    (dl_dift_pow formula-decl nil differentiation dL)
    (dl_dift_val formula-decl nil differentiation dL)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dl_dift_minus formula-decl nil differentiation dL)
    (dl_dift_const formula-decl nil differentiation dL)
    (derivable_M_nqbool? inductive-decl "bool" chain_rule_re dL)
    (diff_re_pow formula-decl nil diff_re_props dL)
    (diff_re_val formula-decl nil diff_re_props dL)
    (diff_re_diff formula-decl nil diff_re_props dL)
    (diff_re? const-decl "bool" chain_rule_re dL)
    (diff_re_prod formula-decl nil diff_re_props dL)
    (diff_re_cnst formula-decl nil diff_re_props dL)
    (same_var const-decl "bool" hp_def dL)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (sqrt_hathat formula-decl nil differentiation dL)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Integral const-decl "real" integral_def analysis)
    (ln const-decl "real" ln_exp lnexp)
    (^^ const-decl "nnreal" expt lnexp)
    (expt const-decl "real" differentiation dL)
    (exp_0 formula-decl nil ln_exp lnexp)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (\|- const-decl "bool" dynamic_logic dL)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (iterate_left const-decl "T" for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (div_safe const-decl "real" reals_safe_ops reals)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (dl_subf formula-decl nil dynamic_logic dL)
    (delta__28 skolem-const-decl "(null?[BoolExpr])" dl_following nil)
    (gamma__27 skolem-const-decl "(cons?[BoolExpr])" dl_following nil)
    (= const-decl "BoolExpr" bool_expr dL)
    (dl_assignb formula-decl nil dynamic_logic dL)
    (gamma__25 skolem-const-decl "(cons?[BoolExpr])" dl_following nil)
    (delta__26 skolem-const-decl "(null?[BoolExpr])" dl_following nil)
    (SUB const-decl "bool" substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (gamma__23 skolem-const-decl "(cons?[BoolExpr])" dl_following nil)
    (delta__24 skolem-const-decl "(null?[BoolExpr])" dl_following nil)
    (fresh_re_exp formula-decl nil fresh_props dL)
    (fresh_re_div_safe formula-decl nil fresh_props dL)
    (^^ const-decl "RealExpr" differentiation dL)
    (div_safe_re const-decl "RealExpr" differentiation dL)
    (dl_existsrRf formula-decl nil dynamic_logic dL)
    (dl_axiom formula-decl nil dynamic_logic dL)
    (val const-decl "real" hp_def dL)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (/ const-decl "[T -> real]" real_fun_ops reals)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (xb const-decl "nat" dl_following nil)
    (va const-decl "posreal" dl_following nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (xa const-decl "nat" dl_following nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (cnst const-decl "real" hp_def dL)
    (/= const-decl "boolean" notequal nil)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (delta__12 skolem-const-decl "(null?[BoolExpr])" dl_following nil)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (DLBOOL const-decl "bool" bool_expr dL)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (HP type-decl nil HP_adt dL) (> const-decl "BoolExpr" bool_expr dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (gamma__11 skolem-const-decl "(null?[BoolExpr])" dl_following nil))
   SHOSTAK)))

