dl_vars_variables : THEORY
BEGIN
  IMPORTING dL@top

  dlvars_swap : LEMMA
    FORALL (x,y,z:dLVar) : pairwise_distinct_vars?((:x,y,z:)) IMPLIES
      ((: val(x) = cnst(-1), val(y) = cnst(1), val(z) = cnst(0) :) |-
       ALLRUNS(ASSIGN((: x << val(y)+val(z), y << val(x)+val(z) :)),
               val(x) = cnst(1) AND val(y) = cnst(-1)))

  var_mapexpr_inj : LEMMA
    FORALL (x,y,z:dLVar)(rx,ry,rz: RealExpr): pairwise_distinct_vars?((:x,y,z:)) IMPLIES
      mapexpr_inj((: z << rz, y << ry, x << rx :))

END dl_vars_variables

dl_vars_parameters[(IMPORTING dL@top) x,y,z : dLVar] : THEORY
BEGIN
  ASSUMING

    distinct_vars : ASSUMPTION
      pairwise_distinct_vars?((:x,y,z:))

  ENDASSUMING

  dlvars_swap : LEMMA
    (: val(x) = cnst(-1), val(y) = cnst(1), val(z) = cnst(0) :) |-
    ALLRUNS(ASSIGN((: x << val(y)+val(z), y << val(x)+val(z) :)),
           val(x) = cnst(1) AND val(y) = cnst(-1))

  var_mapexpr_inj : LEMMA
    FORALL (rx,ry,rz: RealExpr) :
    mapexpr_inj((: z << rz, y << ry, x << rx :))

END dl_vars_parameters

%% The following use of dLVars is OK in examples, but
%% it should be avoided in general as the theorems are not
%% general for all dLVars (only those defined by the constants)

dl_vars_constants : THEORY
BEGIN
  IMPORTING dL@top

  x : dLVar = dlvar(1)
  y : dLVar = dlvar(2)
  z : dLVar = dlvar(3)

  dlvars_swap : LEMMA
    ((: val(x) = cnst(-1), val(y) = cnst(1), val(z) = cnst(0) :) |-
     ALLRUNS(ASSIGN((: x << val(y)+val(z), y << val(x)+val(z) :)),
             val(x) = cnst(1) AND val(y) = cnst(-1)))

  var_mapexpr_inj : LEMMA                                                               
    FORALL (rx,ry,rz: RealExpr) :
    mapexpr_inj((: z << rz, y << ry, x << rx :))

END dl_vars_constants
