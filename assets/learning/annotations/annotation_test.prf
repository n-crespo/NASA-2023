(annotation_test
 (annot_prop 0
  (annot_prop-1 nil 3898619131
   ("" (skoletin)
    (("" (dl-flatten)
      (("" (dl-loop "inv_1")
        (("1" (replace -1) (("1" (dl-assert) nil nil)) nil)
         ("2" (replace -1) (("2" (dl-assert) nil nil)) nil)
         ("3" (replace -1) (("3" (dl-assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((gamma__45 skolem-const-decl "(null?[BoolExpr])" annotation_test
     nil)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (delta__46 skolem-const-decl "(null?[BoolExpr])" annotation_test
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (delta__48 skolem-const-decl "(null?[BoolExpr])" annotation_test
     nil)
    (dl_andL formula-decl nil dynamic_logic dL)
    (gamma__47 skolem-const-decl "(cons?[BoolExpr])" annotation_test
     nil)
    (delta__50 skolem-const-decl "(cons?)" annotation_test nil)
    (gamma__49 skolem-const-decl "(cons?[BoolExpr])" annotation_test
     nil)
    (dl_moveL formula-decl nil dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (append def-decl "list[T]" list_props nil)
    (same_var const-decl "bool" hp_def dL)
    (delta__58 skolem-const-decl "(null?[BoolExpr])" annotation_test
     nil)
    (gamma__57 skolem-const-decl "(cons?[BoolExpr])" annotation_test
     nil)
    (gamma__59 skolem-const-decl "(cons?[BoolExpr])" annotation_test
     nil)
    (delta__60 skolem-const-decl "(null?[BoolExpr])" annotation_test
     nil)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(i))(env)}"
     substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (dl_subre_val formula-decl nil substitution dL)
    (dl_sub_ge formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_sub_and formula-decl nil substitution dL)
    (dl_assignb formula-decl nil dynamic_logic dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (delta__56 skolem-const-decl "(null?[BoolExpr])" annotation_test
     nil)
    (gamma__55 skolem-const-decl "(cons?[BoolExpr])" annotation_test
     nil)
    (delta__54 skolem-const-decl "(null?[BoolExpr])" annotation_test
     nil)
    (gamma__53 skolem-const-decl "(cons?[BoolExpr])" annotation_test
     nil)
    (dl_andR formula-decl nil dynamic_logic dL)
    (dl_axiom formula-decl nil dynamic_logic dL)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (iterate_left const-decl "T" for_iterate structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (delta__52 skolem-const-decl "(null?[BoolExpr])" annotation_test
     nil)
    (gamma__51 skolem-const-decl "(cons?[BoolExpr])" annotation_test
     nil)
    (dl_loop formula-decl nil dynamic_logic dL)
    (list type-decl nil list_adt nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (\|- const-decl "bool" dynamic_logic dL)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (<= const-decl "BoolExpr" bool_expr dL)
    (HP type-decl nil HP_adt dL)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (Assigns type-eq-decl nil hp_def dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (cnst const-decl "real" hp_def dL)
    (y const-decl "nat" annotation_test nil)
    (x const-decl "nat" annotation_test nil)
    (val const-decl "real" hp_def dL)
    (>= const-decl "BoolExpr" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (DLAND const-decl "bool" bool_expr dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil))
   shostak)))

